# Phone-based People Connector System

## Database Schema (MongoDB)

### Person Document Structure

```javascript
{
  _id: ObjectId,
  phoneNumber: String,
  name: String,
  interests: [String],
  skills: [String],
  bio: String,
  location: String,
  vectorEmbedding: [Float], // Store embeddings for semantic search
  createdAt: Date,
  updatedAt: Date
}
```

## API Endpoints

### 1. Person Information Endpoint

GET /api/person/{phoneNumber}

- Retrieves person's information from MongoDB using phone number
- Returns 404 if person not found
- Used by Vapi to fetch caller information

Example Request:

```
GET /api/person/+14155552671
```

Example Response:

```json
{
  "success": true,
  "data": {
    "phoneNumber": "+14155552671",
    "name": "John Doe",
    "interests": ["hiking", "photography", "machine learning"],
    "skills": ["JavaScript", "Python", "public speaking"],
    "bio": "Software engineer passionate about outdoor activities",
    "location": "San Francisco, CA",
    "createdAt": "2024-03-15T08:30:00Z",
    "updatedAt": "2024-03-15T08:30:00Z"
  }
}
```

Error Response:

```json
{
  "success": false,
  "error": "Person not found",
  "code": 404
}
```

### 2. Similar Person Search Endpoint

POST /api/person/similar

- Input: Interests/skills/description text
- Generates embedding for input text
- Performs vector similarity search in MongoDB
- Returns most similar people based on cosine similarity
- Used by Vapi when someone asks for connections

Example Request:

```json
{
  "searchText": "Looking for someone interested in hiking and photography who knows JavaScript",
  "limit": 3
}
```

Example Response:

```json
{
  "success": true,
  "data": {
    "matches": [
      {
        "name": "John Doe",
        "phoneNumber": "+14155552671",
        "interests": ["hiking", "photography", "machine learning"],
        "skills": ["JavaScript", "Python", "public speaking"],
        "similarity": 0.89
      },
      {
        "name": "Jane Smith",
        "phoneNumber": "+14155553892",
        "interests": ["photography", "travel", "coding"],
        "skills": ["JavaScript", "React", "UI/UX"],
        "similarity": 0.75
      },
      {
        "name": "Mike Johnson",
        "phoneNumber": "+14155559023",
        "interests": ["hiking", "camping", "web development"],
        "skills": ["JavaScript", "Node.js", "MongoDB"],
        "similarity": 0.72
      }
    ]
  }
}
```

### 3. Create Person Endpoint

POST /api/person/create

- Creates a new person record
- Requires only name and phone number
- Other fields (interests, skills, bio, location) are optional
- Automatically generates and stores vector embeddings
- Validates phone number format
- Returns 409 Conflict if phone number already exists

Example Minimal Request:

```json
{
  "phoneNumber": "+14155552671",
  "name": "John Doe"
}
```

Example Full Request:

```json
{
  "phoneNumber": "+14155552671",
  "name": "John Doe",
  "interests": ["hiking", "photography", "machine learning"],
  "skills": ["JavaScript", "Python", "public speaking"],
  "bio": "Software engineer passionate about outdoor activities",
  "location": "San Francisco, CA"
}
```

Example Response (Minimal Request):

```json
{
  "success": true,
  "message": "Person created successfully",
  "data": {
    "phoneNumber": "+14155552671",
    "name": "John Doe",
    "interests": [],
    "skills": [],
    "bio": "",
    "location": "",
    "createdAt": "2024-03-15T08:30:00Z",
    "updatedAt": "2024-03-15T08:30:00Z"
  }
}
```

Example Response (Full Request):

```json
{
  "success": true,
  "message": "Person created successfully",
  "data": {
    "phoneNumber": "+14155552671",
    "name": "John Doe",
    "interests": ["hiking", "photography", "machine learning"],
    "skills": ["JavaScript", "Python", "public speaking"],
    "bio": "Software engineer passionate about outdoor activities",
    "location": "San Francisco, CA",
    "createdAt": "2024-03-15T08:30:00Z",
    "updatedAt": "2024-03-15T08:30:00Z"
  }
}
```

Error Responses:

```json
{
  "success": false,
  "error": "Invalid phone number format",
  "code": 400
}
```

```json
{
  "success": false,
  "error": "Phone number already exists",
  "code": 409
}
```

```json
{
  "success": false,
  "error": "Name is required",
  "code": 400
}
```

### 4. Update Person Endpoint

PUT /api/person/{phoneNumber}

- Updates an existing person's information
- Automatically updates vector embeddings
- Returns 404 if person not found

Example Request:

```json
{
  "name": "John Doe",
  "interests": ["hiking", "photography", "machine learning", "cooking"],
  "skills": ["JavaScript", "Python", "public speaking", "React"],
  "bio": "Software engineer passionate about outdoor activities and cooking",
  "location": "San Francisco, CA"
}
```

Example Response:

```json
{
  "success": true,
  "message": "Person updated successfully",
  "data": {
    "phoneNumber": "+14155552671",
    "name": "John Doe",
    "interests": ["hiking", "photography", "machine learning", "cooking"],
    "skills": ["JavaScript", "Python", "public speaking", "React"],
    "bio": "Software engineer passionate about outdoor activities and cooking",
    "location": "San Francisco, CA",
    "createdAt": "2024-03-15T08:30:00Z",
    "updatedAt": "2024-03-15T09:45:00Z"
  }
}
```

Error Responses:

```json
{
  "success": false,
  "error": "Person not found",
  "code": 404
}
```

```json
{
  "success": false,
  "error": "Invalid request data",
  "code": 400
}
```

## Implementation Tasks

### Database Setup

- [ ] Set up MongoDB Atlas cluster
- [ ] Create indexes for phoneNumber and vector search
- [ ] Implement vector search capabilities

### API Development

- [ ] Set up Python Flask backend
- [ ] Implement SBERT embeddings generation
- [ ] Create CRUD operations for person management
- [ ] Add vector similarity search functionality
- [ ] Add input validation and error handling

### Vapi Integration

- [ ] Set up Vapi account and phone number
- [ ] Create Vapi assistant with appropriate prompts
- [ ] Configure webhook endpoints for Vapi
- [ ] Implement function calling for database operations
- [ ] Add conversation flows for:
  - New user registration
  - Finding similar people
  - Updating user information

### Security

- [ ] Add API authentication
- [ ] Implement rate limiting
- [ ] Add phone number verification
- [ ] Secure MongoDB connection
- [ ] Add input sanitization

### Testing

- [ ] Write unit tests for API endpoints
- [ ] Test vector similarity search accuracy
- [ ] Test Vapi integration
- [ ] Load testing for concurrent calls
